InnoDB 使用B+Tree结构。

B-Tree结构意味着数据都是按照顺序存储的，并且每一个叶子页到根节点的距离相同。

B-Tree索引能够加快访问数据的速度。因为存储引擎不需要在进行全表扫描来获取需要的数据，取而代之的是从索引的根节点开始进行搜索。根节点的槽中存放了指向子节点的指针，存储引擎根据这些指针向下层寻找。通过比较节点页的值和要查找的值可以找到合适的指针进入下一层子节点，这些指针实际上定义了子节点页中值的上限和下限。最终存储引擎要么找到对应的值，要么该记录不存在。叶子节点比较特殊，他们的指针指向的是被索引的数据，而不是其他的节点页。

B-Tree对索引列是顺序组织存储的，所以很适合查找范围数据。

索引对于多个值进行排序的依据是创建表语句定义索引时列的顺序。

索引有效性：
全值匹配：和索引中的所有列进行匹配。
匹配最左前缀：联合索引中只使用索引的第一列。
匹配列前缀：只匹配某一列的值的开头部分。
匹配范围值：按照顺序查询某一个区间的数据
只访问索引的查询：查询中只访问索引而不需要访问数据行。

索引无效性：
非最左列查询：
查询中有某个列的范围查询，则其右面所有列都无法使用索引优化查询。

索引列的顺序很重要，优化时可以使用相同的列但是顺序不同的索引来满足不同类型的查询需求。
