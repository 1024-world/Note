哈希索引基于哈希表实现，只有精确匹配所有列的查询时才有效。对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码，哈希码是一个较小的值，并且不同键值行计算出来的哈希码也不一样。哈希索引将所有的哈希码存储在索引中，同时在哈希表中保存指向每个数据行的指针。如果有多个列的哈希值相同，索引会以链表的形式存放多个记录的指针到同一个哈希条目中。

索引的本身只需要存储哈希值和行指针，所以索引的结构十分紧凑，这也让哈希索引查找的速度非常快。

索引的限制：
1.索引中只包含哈希值和行指针，而不存储字段值，所以不能使用索引中的值来避免读取行。不过，访问内存中的行的速度很快，所以这一点对性能的影响并不明显。
2.哈希索引数据并不是按照索引值顺序存储的，所以也就无法用于排序。
3.哈希索引也不支持部分索引列匹配查找，因为哈希索引始终是使用索引列的全部内容来计算哈希值的。
4.哈希索引只支持等值比较查询，不支持范围查找。
5.哈希冲突很多的话，索引维护的代价会很高，包括删除、查找等操作。需要遍历对应哈希值的链表中的每一行，并找到对应行的引用。

创建自定义的哈希索引：
思路很简单，在B-Tree的基础上创建一个伪哈希索引，这和真正的哈希索引不是一回事，因为还是使用B-Tree索引进行查找，但是它使用哈希值而不是键本身进行索引查找。就是在数据行中增加一个字段存储索引的哈希值，然后再该列上面建立一个索引，查询时使用该索引进行查询，适用于在较大的字符串上面建立索引。使用触发器维护哈希值，这样增加了额外的维护工作。


