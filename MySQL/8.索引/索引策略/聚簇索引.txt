聚簇索引并不是一种单独的索引类型，而是一种数据存储方式。具体的细节依赖于其实现方式，但是InnoDB的聚簇索引实际上是在同一结构中保存了B-Tree索引和数据行。

当表有聚簇索引时，他的数据行实际上存放在索引的叶子页中。术语聚簇表示数据行和相邻的键值紧凑的存储在一起。因为无法同时将数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。

InnoDB会选择一个唯一的非空索引代替。如果没有定义主键，InnoDB会选择一个唯一的非空索引代替。如果没有这样的索引，InnoDB会隐式定义一个主键来作为聚簇索引。InnoDB只聚集在同一个页面中的记录，包含相邻键值的页面可能会相距甚远。

聚簇索引的优点：
1.可以把相关数据保存在一起。例如实现电子邮箱时，可以根据用户ID来聚集数据，这样只需要从磁盘读取少数的数据页就能获取某个用户的全部邮件。如果没有使用聚簇索引，则每封邮件都可能导致一次磁盘I/O。
2.数据访问更快。聚簇索引将索引和数据保存在同一个B-Tree中，因此从聚簇索引中获取数据通常比在非聚簇索引中查找要快。
3.使用覆盖索引扫描的查询可以直接使用叶节点的主键值。

缺点：
1。聚簇索引最大限度的提高了I/O密集型应用的性能，但如果数据全部都放在内存中，则访问的顺序就没那么重要了，聚簇索引也就没什么优势了。
2.插入速度严重依赖于插入顺序。按照主键的顺序插入是加载数据到InnoDB表中速度最快的方式。但如果不是按照主键顺序加载数据，那么在加载完成后最好使用OPTIMIZE TABLE命令重新组织一下表。
3.更新聚簇索引列的代价很大，因为会强制InnoDB将每个被更新的行移动到新的位置。
4.基于聚簇索引的表插入新行，或者主键被更新导致需要移动行的时候，可能面临“页分裂”问题。当行的主键值要求必须要将这一行数据插入到某个已满的页中时，存储引擎会将该页分裂成两个页面来容纳该行，这就是一次页分裂操作。页分裂可能导致表占用更多的磁盘空间。
5.聚簇索引可能导致全表扫描变慢，尤其是行比较稀疏，或者由于页分裂导致数据库存储不连续的时候。
6.二级索引可能比想象的要更大，因为二级索引的叶子节点包含了引用行的主键列。
7.二级索引访问需要两次索引查找，而不是一次。

MyISAM索引的叶子节点存储的是行指针，而InnoDB存储的是整个数据行，对于二级索引，InnoDB的叶子节点存储的是主键值，而不是行指针，这样实现的好处是减少了当出现行移动或者数据页分裂时二级索引的维护工作。

在InnoDB表中按照主键顺序插入行：
优点：因为主键的值是顺序的，所以InnoDB会把每一条记录都存储在上一条记录的后面。当达到页的最大填充因子(InnoDB默认的最大填充因子时页大小的15/16，留出部分用于以后修改)时，下一条记录就会被写入到新的页中，一旦数据按照这种顺序的方式加载，主键页就会近似于被顺序的记录填满，这也正是所期望的结果。

缺点：
1.写入的目标页可能已经刷到磁盘上并从缓存中移除，或者还没有被加载到缓存中。InnoDB在插入之前不得不先找到并从磁盘读取目标页到内存中，这将导致大量的随机I/O。
2.因为写入时乱序的，InnoDB不得不频繁的做页分裂操作，以便为新的行分配空间，页分裂导致移动大量数据，一次插入最少需要修改三个页面而不是一个页。
3.由于频繁的页分裂，页会变得稀疏并被不规则的填充，所以最终数据会有碎片。