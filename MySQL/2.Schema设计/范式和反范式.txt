第一范式：所有的域都应该是原子性的，即数据表的每一列都是不可分割的原子数据项。
第二范式：在第一范式的基础上，要求实体的属性完全依赖于主关键字，而不能只依赖于主关键字的一部分。即数据表的每一列都要完全依赖于主键。
第三范式：在第二范式的基础上，任何非主属性不得依赖于其他非主属性，即数据表的每一列必须直接依赖于主键，不能存在传递依赖。

范式的优点和缺点：
优点：范式化的更新操作通常比反范式化要快。
当数据较好的范式化时，只有很少或者没有重复数据，所以只需要修改更少的数据。
范式化的表通常更小，可以更好地放在内存里，所以执行操作会更快。
很少有多余的数据意味着检索列表数据时更少需要DISTINCT或者GROUP BY语句。

缺点：范式化设计的数据表通常需要关联。稍微复杂一点的查询语句在符合范式的schema上都可能需要至少一次关联，也许更多。这不但代价昂贵，也可能使一些索引策略无效。

反范式的优点和缺点：
优点：数据都在一张表中，可以很好的避免关联。


混用范式化和反范式化：
常用的反范式化数据的方法是复制或者缓存，在不同的表中存储相同的特定的列。在MySQL5.0和更新版本可以使用触发器更新缓存值。

